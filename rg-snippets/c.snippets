###########################################################################
#                            TextMate Snippets                            #
###########################################################################

priority -50

#####################################
#			Preprocessor			#
#####################################

snippet inc "#include <...>"
#include <${1}>${2}
endsnippet

snippet INC "#include ..."
#include "${1}"${2}
endsnippet

snippet def "#define ..."
#define ${1}
endsnippet

snippet #ifndef "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif /* ifndef $1 */
endsnippet

snippet #if "#if #endif" b
#if ${1:0}
${VISUAL}${0}
#endif
endsnippet

snippet mark "#pragma mark (mark)"
#if 0
${1:#pragma mark -
}#pragma mark $2
#endif

$0
endsnippet

#####################################
#			Comment					#
#####################################

snippet comment "/*Head comment*/"
/*${0}
 * Rich by `date +"%Y/%m/%d"`
 */
endsnippet

snippet ucomment "/*comment*/"
/*
 * ${VISUAL}${0}
 */
endsnippet


#####################################
#				Main				#
#####################################

snippet main "main() (arg)"
int main(int argc, char *argv[])
{
	${VISUAL}${0}
	return 0;
}
endsnippet

snippet mainv "main(void)"
int main(void)
{
	${VISUAL}${0}
	return 0;
}
endsnippet

#####################################
#				Loops				#
#####################################


snippet whs "while loop simple"
while (${1})
	${2}
endsnippet

snippet whi "while loop"
while (${1}) {
	${2}
}
endsnippet

snippet fors "for simple"
for (${1};${2};${3})
	${4}
endsnippet

snippet for "for loop (for)"
for (${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}${0}
}
endsnippet

snippet fori "for int loop (fori)"
for (${4:int} ${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}${0}
}
endsnippet


#####################################
#		Control Statements			#
#####################################

snippet ifs "if simple"
if (${1:ture})
	${0}
endsnippet

snippet if "if statement"
if (${1:true}) {
	${0}
}
endsnippet

snippet el "else ..."
else {
	${0}
}
endsnippet

snippet elif "else if ..."
else if (${1:true}) {
	${0}
}
endsnippet

snippet ife "if ... else ..."
if (${1}) {
	${2}
} else {
	${3}
}
endsnippet

snippet t " ?: operator"
${1:/* condition */} ? ${2:a} : ${3:b}
endsnippet


#####################################
#		Header include guard		#
#####################################

snippet once "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
	import random, string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	rand = ''.join(random.sample(string.ascii_letters+string.digits, 8))
	snip.rv = ('%s_%s' % (name,rand)).upper()
else:
	snip.rv = snip.c`}
#define $1

${VISUAL}${0}

#endif /* end of include guard: $1 */
endsnippet

#####################################
#			 Function				#
#####################################

snippet fprintf "fprintf ..."
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet eli "else if .. (eli)"
else if (${1:/* condition */}) {
	${VISUAL}${0}
}
endsnippet

snippet printf "printf .. (printf)"
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet fun "function" b
${1:void} ${2:function_name}(${3})
{
	${VISUAL}${0}
}
endsnippet

snippet fund "function declaration" b
${1:void} ${2:function_name}(${3});
endsnippet

#####################################
#				Types				#
#####################################

snippet st "struct"
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`} {
	${0:/* data */}
};
endsnippet

snippet td "typedef ..."
typedef ${1:int} ${2:MyCustomType};
endsnippet

snippet tds "typedef struct ..."
typedef struct ${2:_$1} {
	${3:/* data */}
} ${1:`vim_snippets#Filename('$1_t','name')'};
endsnippet

# vim:ft=snippets:

#
#
#

snippet todo "TODO..."
/*!	TODO: ${1:Todo description here}
 *	\todo $1
 */
endsnippet
